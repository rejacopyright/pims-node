model transaction_service {
  id                      String    @id @default(uuid())
  order_no                String    @unique
  user_id                 String?
  /// 1[Regular] 2[Member]
  user_type               Int       @default(1)
  member_transaction_id   String?
  /// Locattion Branch
  branch_id               String?
  payment_id              String?
  payment                 Json?
  service_id              Int
  // If service is class (Studio / Functional) / service_id in [2,3]
  class_schedule_id       String?
  purchase_expired        DateTime?
  purchased_at            DateTime?
  /// PLUS FEE
  product_fee             Float?    @default(0)
  service_fee             Float?    @default(0)
  app_fee                 Float?    @default(0)
  /// MIN FEE
  discount_fee            Float?    @default(0)
  voucher_id              String?
  /// TOTAL
  total_fee               Float?    @default(0)
  /// TIMING
  start_date              DateTime
  end_date                DateTime
  /// QR TIME VALIDITY (IF ACTIVE)
  valid_from              DateTime?
  valid_to                DateTime?
  /// 1[Unpaid] 2[Active] 3[Done] 4[Cancel]
  status                  Int       @default(1)
  /// this.start_date.substract(config.cancel_booking_time, 'minutes') (When Activate/Purchase Order) [IF minutesOf(start_date - now) < cancel_booking_time]
  cancelable_until        DateTime?
  canceled_at             DateTime?
  /// 1[System] 2[User] 3[Trainer] 4[Admin]
  canceled_by             Int?
  cancel_reason           String?
  created_at              DateTime  @default(now())
  updated_at              DateTime  @updatedAt
  deleted                 DateTime?
}
